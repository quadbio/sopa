from utils import WorkflowPaths, Args

paths = WorkflowPaths(config)
args = Args(paths, config)

localrules: all

rule all:
    input:
        expand(paths.annotations, region=config["regions"]) if args.annotate else [],
        expand(paths.explorer_experiment, region=config["regions"]),
        expand(paths.explorer_image, region=config["regions"]),
        expand(paths.report, region=config["regions"])
    shell:
        """
        echo ðŸŽ‰ Successfully run sopa
        echo â†’ SpatialData output directory: {paths.sdata_path}
        echo â†’ Explorer output directory: {paths.explorer_directory}
        echo â†’ Open the result in the explorer: 'open {paths.explorer_experiment}'
        """

def format_path(template, wildcards):
    return template.format(**wildcards)

rule to_spatialdata:
    input:
        lambda wildcards: format_path(paths.data_path, wildcards) if config["read"]["technology"] != "uniform" else [],
    output:
        paths.sdata_zgroup if paths.data_path else [],
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    params:
        args_reader = str(args['read']),
        sdata_path = lambda wildcards: format_path(str(paths.sdata_path), wildcards),
    shell:
        """
        sopa read {input} --sdata-path {params.sdata_path} {params.args_reader}
        """

checkpoint patchify_cellpose:
    input:
        paths.sdata_zgroup,
    output:
        patches_file = paths.smk_patches_file_image,
        patches = touch(paths.smk_patches),
    params:
        args_patchify = str(args["patchify"].where(contains="pixel")),
    conda:
        "sopa"
    shell:
        """
        sopa patchify image {paths.sdata_path} {params.args_patchify}
        """

checkpoint patchify_baysor:
    input:
        paths.sdata_zgroup,
        paths.smk_cellpose_boundaries if args.cellpose else [],
    output:
        patches_file = paths.smk_patches_file_baysor,
        smk_baysor_temp_dir = directory(paths.smk_baysor_temp_dir),
    params:
        args_patchify = str(args["patchify"].where(contains="micron")),
        args_baysor = args.dump_baysor_patchify() if args.baysor else "",
        arg_prior = "--use-prior" if args.cellpose else "",
    conda:
        "sopa"
    shell:
        """
        sopa patchify baysor {paths.sdata_path} {params.args_patchify} {params.args_baysor} {params.arg_prior}
        """

checkpoint patchify_comseg:
    input:
        paths.sdata_zgroup,
        paths.smk_cellpose_boundaries if args.cellpose else [],
    output:
        patches_file = paths.smk_patches_file_comseg,
        smk_comseg_temp_dir = directory(paths.smk_comseg_temp_dir),
    params:
        args_patchify = str(
            args["patchify"].where([
                "patch_width_microns",
                "patch_overlap_microns",
                "min_transcripts_per_patch",
                "min_cells_per_patch",
            ],
        )),
        args_comseg = args.dump_comseg_patchify() if args.comseg else "",
        arg_prior = "--use-prior" if args.cellpose else "",
    conda:
        "sopa"
    shell:
        """
        sopa patchify comseg {paths.sdata_path} {params.args_patchify} {params.args_comseg} {params.arg_prior}
        """

rule patch_segmentation_cellpose:
    input:
        paths.smk_patches_file_image,
        paths.smk_patches,
    output:
        paths.smk_cellpose_temp_dir / "{index}.parquet",
    conda:
        "sopa"
    params:
        args_cellpose = str(args["segmentation"]["cellpose"]),
    shell:
        """
        sopa segmentation cellpose {paths.sdata_path} --patch-dir {paths.smk_cellpose_temp_dir} --patch-index {wildcards.index} {params.args_cellpose}
        """

rule patch_segmentation_baysor:
    input:
        patches_file = paths.smk_patches_file_baysor,
        baysor_patch = paths.smk_baysor_temp_dir / "{index}",
    output:
        paths.smk_baysor_temp_dir / "{index}" / "segmentation_counts.loom",
    params:
        args_baysor_prior_seg = args.baysor_prior_seg,
    resources:
        mem_mb=128_000,
    shell:
        """
        if command -v module &> /dev/null; then
            module purge
        fi

        cd {input.baysor_patch}

        help_output=$({config[executables][baysor]} run --help 2>&1) # check if the polygon-format option is available
        if [[ $help_output == *"polygon-format"* ]]; then
            {config[executables][baysor]} run --polygon-format GeometryCollection -c config.toml transcripts.csv {params.args_baysor_prior_seg}
        else
            {config[executables][baysor]} run --save-polygons GeoJSON -c config.toml transcripts.csv {params.args_baysor_prior_seg}
        fi
        """

rule patch_segmentation_comseg:
    input:
        patches_file = paths.smk_patches_file_comseg,
        baysor_patch = paths.smk_comseg_temp_dir / "{index}",
    output:
        paths.smk_comseg_temp_dir / "{index}" / "segmentation_polygons.json",
        paths.smk_comseg_temp_dir / "{index}" / "segmentation_counts.h5ad",
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    shell:
        """
        sopa segmentation comseg {paths.sdata_path} --patch-dir {paths.smk_comseg_temp_dir} --patch-index {wildcards.index}
        """

def get_input_resolve(name, dirs=False):
    def _(wilcards):
        with getattr(checkpoints, f"patchify_{name}").get(**wilcards).output.patches_file.open() as f:
            return paths.cells_paths(f.read(), name, dirs=dirs)
    return _

rule resolve_cellpose:
    input:
        get_input_resolve("cellpose"),
    output:
        touch(paths.smk_cellpose_boundaries),
    conda:
        "sopa"
    shell:
        """
        sopa resolve cellpose {paths.sdata_path} --patch-dir {paths.smk_cellpose_temp_dir}
        """

rule resolve_baysor:
    input:
        files = get_input_resolve("baysor"),
        dirs = get_input_resolve("baysor", dirs=True),
    output:
        touch(paths.smk_baysor_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_patches_dirs = lambda _, input: " ".join(f"--patches-dirs {directory}" for directory in input.dirs),
        args_min_area = args.min_area("baysor"),
    shell:
        """
        sopa resolve baysor {paths.sdata_path} --gene-column {args.gene_column} {params.args_min_area} {params.args_patches_dirs}

        rm -r {paths.smk_baysor_temp_dir}    # cleanup large baysor files
        """

rule resolve_comseg:
    input:
        files = get_input_resolve("comseg"),
        dirs = get_input_resolve("comseg",dirs=True),
    output:
        touch(paths.smk_comseg_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_patches_dirs=lambda _, input: " ".join(f"--patches-dirs {directory}" for directory in input.dirs),
        args_min_area=args.min_area("comseg"),
    shell:
        """
        sopa resolve comseg {paths.sdata_path} --gene-column {args.gene_column} {params.args_min_area} {params.args_patches_dirs}

        rm -r {paths.smk_comseg_temp_dir}    # cleanup large comseg files
        """

def get_smk_boundaries(args):
    if args.baysor:
        return paths.smk_baysor_boundaries
    elif args.comseg:
        return paths.smk_comseg_boundaries
    elif args.cellpose:
        return paths.smk_cellpose_boundaries
    else:
        raise ValueError("No segmentation method selected")

rule aggregate:
    input:
        get_smk_boundaries(args),
    output:
        touch(paths.smk_aggregation),
    conda:
        "sopa"
    params:
        args_aggregate = str(args["aggregate"] or ""),
    resources:
        mem_mb=64_000,
    shell:
        """
        sopa aggregate {paths.sdata_path} {params.args_aggregate}
        """

rule annotate:
    input:
        paths.smk_aggregation,
    output:
        directory(paths.annotations),
    conda:
        "sopa"
    resources:
        partition="gpgpuq" if args['annotation']['method'] == "tangram" else "shortq",
        gpu="a100:1" if args['annotation']['method'] == "tangram" else 0,
    params:
        method_name = args['annotation']['method'],
        args_annotation = str(args['annotation']['args']),
    shell:
        """
        sopa annotate {params.method_name} {paths.sdata_path} {params.args_annotation}
        """

rule image_write:
    input:
        paths.sdata_zgroup,
    output:
        paths.explorer_image,
    conda:
        "sopa"
    resources:
        mem_mb=64_000,
        partition="longq"
    params:
        args_explorer = str(args["explorer"].where(keys=['lazy', 'ram_threshold_gb', 'pixel_size', 'pixelsize'])),
    shell:
        """
        sopa explorer write {paths.sdata_path} --output-path {paths.explorer_directory} {params.args_explorer} --mode "+i" --no-save-h5ad
        """

rule report:
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.report,
    conda:
        "sopa"
    shell:
        """
        sopa report {paths.sdata_path} {paths.report}
        """

rule explorer:
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.explorer_experiment,
    conda:
        "sopa"
    resources:
        mem_mb=256_000,
    params:
        args_explorer = str(args["explorer"]),
    shell:
        """
        sopa explorer write {paths.sdata_path} --output-path {paths.explorer_directory} {params.args_explorer} --mode "-i"
        """
